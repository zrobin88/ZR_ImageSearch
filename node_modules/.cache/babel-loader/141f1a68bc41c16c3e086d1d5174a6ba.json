{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyrobin/Desktop/Code/seasons/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass App extends React.Component {\n  render() {\n    var geocoder;\n\n    initialize = () => {\n      geocoder = new google.maps.Geocoder();\n    };\n\n    function codeLatLng(lat, lng) {\n      var latlng = new google.maps.LatLng(lat, lng);\n      geocoder.geocode({\n        'latLng': latlng\n      }, function (results, status) {\n        if (status == google.maps.GeocoderStatus.OK) {\n          console.log(results);\n\n          if (results[1]) {\n            //formatted address\n            alert(results[0].formatted_address); //find country name\n\n            for (var i = 0; i < results[0].address_components.length; i++) {\n              for (var b = 0; b < results[0].address_components[i].types.length; b++) {\n                //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate\n                if (results[0].address_components[i].types[b] == \"administrative_area_level_1\") {\n                  //this is the object you are looking for\n                  city = results[0].address_components[i];\n                  break;\n                }\n              }\n            } //city data\n\n\n            alert(city.short_name + \" \" + city.long_name);\n          } else {\n            alert(\"No results found\");\n          }\n        } else {\n          alert(\"Geocoder failed due to: \" + status);\n        }\n      });\n    }\n\n    window.navigator.geolocation.getCurrentPosition(position => console.log(position), err => console.log(err));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Latitude: \");\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}), document.querySelector('#root'));","map":{"version":3,"sources":["/Users/zacharyrobin/Desktop/Code/seasons/src/index.js"],"names":["React","Component","ReactDOM","App","render","geocoder","initialize","google","maps","Geocoder","codeLatLng","lat","lng","latlng","LatLng","geocode","results","status","GeocoderStatus","OK","console","log","alert","formatted_address","i","address_components","length","b","types","city","short_name","long_name","window","navigator","geolocation","getCurrentPosition","position","err","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAIA,MAAMC,GAAN,SAAkBH,KAAK,CAACC,SAAxB,CAAiC;AAE7BG,EAAAA,MAAM,GAAE;AACJ,QAAIC,QAAJ;;AAEAC,IAAAA,UAAU,GAAC,MAAI;AACXD,MAAAA,QAAQ,GAAC,IAAIE,MAAM,CAACC,IAAP,CAAYC,QAAhB,EAAT;AACH,KAFD;;AAIA,aAASC,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAE1B,UAAIC,MAAM,GAAG,IAAIN,MAAM,CAACC,IAAP,CAAYM,MAAhB,CAAuBH,GAAvB,EAA4BC,GAA5B,CAAb;AACAP,MAAAA,QAAQ,CAACU,OAAT,CAAiB;AAAC,kBAAUF;AAAX,OAAjB,EAAqC,UAASG,OAAT,EAAkBC,MAAlB,EAA0B;AAC7D,YAAIA,MAAM,IAAIV,MAAM,CAACC,IAAP,CAAYU,cAAZ,CAA2BC,EAAzC,EAA6C;AAC7CC,UAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;;AACE,cAAIA,OAAO,CAAC,CAAD,CAAX,EAAgB;AACf;AACAM,YAAAA,KAAK,CAACN,OAAO,CAAC,CAAD,CAAP,CAAWO,iBAAZ,CAAL,CAFe,CAGhB;;AACK,iBAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACR,OAAO,CAAC,CAAD,CAAP,CAAWS,kBAAX,CAA8BC,MAA9C,EAAsDF,CAAC,EAAvD,EAA2D;AAC5D,mBAAK,IAAIG,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACX,OAAO,CAAC,CAAD,CAAP,CAAWS,kBAAX,CAA8BD,CAA9B,EAAiCI,KAAjC,CAAuCF,MAAtD,EAA6DC,CAAC,EAA9D,EAAkE;AAElE;AACI,oBAAIX,OAAO,CAAC,CAAD,CAAP,CAAWS,kBAAX,CAA8BD,CAA9B,EAAiCI,KAAjC,CAAuCD,CAAvC,KAA6C,6BAAjD,EAAgF;AAC5E;AACAE,kBAAAA,IAAI,GAAEb,OAAO,CAAC,CAAD,CAAP,CAAWS,kBAAX,CAA8BD,CAA9B,CAAN;AACA;AACH;AACJ;AACJ,aAde,CAehB;;;AACAF,YAAAA,KAAK,CAACO,IAAI,CAACC,UAAL,GAAkB,GAAlB,GAAwBD,IAAI,CAACE,SAA9B,CAAL;AAGC,WAnBD,MAmBO;AACLT,YAAAA,KAAK,CAAC,kBAAD,CAAL;AACD;AACF,SAxBD,MAwBO;AACLA,UAAAA,KAAK,CAAC,6BAA6BL,MAA9B,CAAL;AACD;AACF,OA5BD;AA6BD;;AAEHe,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACIC,QAAQ,IAAEhB,OAAO,CAACC,GAAR,CAAYe,QAAZ,CADd,EAEIC,GAAG,IAAEjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,CAFT;AAMA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AAlD4B;;AAqDjCnC,QAAQ,CAACE,MAAT,CACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEIkC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAFJ","sourcesContent":["import React, { Component }  from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\n\nclass App extends React.Component{\n\n    render(){\n        var geocoder\n\n        initialize=()=>{\n            geocoder=new google.maps.Geocoder();\n        }\n\n        function codeLatLng(lat, lng) {\n\n            var latlng = new google.maps.LatLng(lat, lng);\n            geocoder.geocode({'latLng': latlng}, function(results, status) {\n              if (status == google.maps.GeocoderStatus.OK) {\n              console.log(results)\n                if (results[1]) {\n                 //formatted address\n                 alert(results[0].formatted_address)\n                //find country name\n                     for (var i=0; i<results[0].address_components.length; i++) {\n                    for (var b=0;b<results[0].address_components[i].types.length;b++) {\n        \n                    //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate\n                        if (results[0].address_components[i].types[b] == \"administrative_area_level_1\") {\n                            //this is the object you are looking for\n                            city= results[0].address_components[i];\n                            break;\n                        }\n                    }\n                }\n                //city data\n                alert(city.short_name + \" \" + city.long_name)\n        \n        \n                } else {\n                  alert(\"No results found\");\n                }\n              } else {\n                alert(\"Geocoder failed due to: \" + status);\n              }\n            });\n          }\n\n        window.navigator.geolocation.getCurrentPosition(\n            position=>console.log(position),\n            err=>console.log(err));\n\n\n\n        return(<div>Latitude: </div>)\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n)\n\n"]},"metadata":{},"sourceType":"module"}