{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyrobin/Desktop/Code/seasons/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './spinner';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      errorMessage: '' //get location when componenet mounts\n\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(position => this.setState({\n      lat: position.coords.latitude\n    }), err => this.setState({\n      errorMessage: err.message\n    }));\n  }\n\n  render() {\n    //if theres an error and no latitude return an error message\n    if (this.state.errorMessage && !this.state.lat) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"  Error: \", this.state.errorMessage);\n    } //if there is no error and we get the latitude return the latitude to the SeasonDisplay component\n\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return React.createElement(SeasonDisplay, {\n        lat: this.state.lat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      });\n    } //If loading return the Spinner component\n\n\n    return React.createElement(Spinner, {\n      message: \"please accept location request\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    });\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}), document.querySelector('#root'));","map":{"version":3,"sources":["/Users/zacharyrobin/Desktop/Code/seasons/src/index.js"],"names":["React","ReactDOM","SeasonDisplay","Spinner","App","Component","state","lat","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BC,KAD8B,GACxB;AACFC,MAAAA,GAAG,EAAE,IADH;AAEFC,MAAAA,YAAY,EAAE,EAFZ,CAKN;;AALM,KADwB;AAAA;;AAO9BC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACIC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAAER,MAAAA,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,KAAd,CADhB,EAEIC,GAAG,IAAI,KAAKH,QAAL,CAAc;AAAEP,MAAAA,YAAY,EAAEU,GAAG,CAACC;AAApB,KAAd,CAFX;AAGE;;AAINC,EAAAA,MAAM,GAAG;AACL;AACA,QAAG,KAAKd,KAAL,CAAWE,YAAX,IAA2B,CAAC,KAAKF,KAAL,CAAWC,GAA1C,EAA8C;AAC1C,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAe,KAAKD,KAAL,CAAWE,YAA1B,CAAP;AACH,KAJI,CAKL;;;AACA,QAAG,CAAC,KAAKF,KAAL,CAAWE,YAAZ,IAA4B,KAAKF,KAAL,CAAWC,GAA1C,EAA8C;AAC1C,aAAO,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KARI,CASL;;;AACA,WAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAC,gCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AA1B6B;;AA6BlCN,QAAQ,CAACmB,MAAT,CACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEIC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAFJ","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from './SeasonDisplay'\nimport Spinner from './spinner'\n\nclass App extends React.Component {\n    state={\n        lat: null,\n        errorMessage: ''\n    }\n\n    //get location when componenet mounts\n    componentDidMount(){\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({ lat: position.coords.latitude }),\n            err => this.setState({ errorMessage: err.message }) \n        )};\n \n    \n\n    render() {\n        //if theres an error and no latitude return an error message\n        if(this.state.errorMessage && !this.state.lat){\n            return(<div>  Error: {this.state.errorMessage}</div>)\n        }\n        //if there is no error and we get the latitude return the latitude to the SeasonDisplay component\n        if(!this.state.errorMessage && this.state.lat){\n            return(<SeasonDisplay lat={this.state.lat} />)\n        }\n        //If loading return the Spinner component\n        return(<Spinner message=\"please accept location request\"/>)\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n)\n\n"]},"metadata":{},"sourceType":"module"}